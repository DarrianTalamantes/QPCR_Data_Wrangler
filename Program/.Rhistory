geom_point(size = 2) +
ggtitle("Origional CP Values Fescue")
ggarrange(EpiAdjCP, EpiOgCP, ncol = 1, nrow = 2)
ggarrange(FescueAdjCP, FescueOgCP, ncol = 1, nrow = 2)
###### Inputting the rest of the data (315, data not using red blue 2x2 standards)  ######
# commands used to make data sets, then added data set column
# cat cp_values_1041-1120_2x2.csv cp_values_1121-1200_2x2.csv cp_values_1201-1280_2x2.csv cp_values_1281-END-Redoes_2x2.csv > 1041-end-redoes_2x2.csv
# cat cp_values_1041-1121_g3p4.csv cp_values_1121-1200_g3p4.csv cp_values_1201-1280_g3p4.csv cp_values_1281-END-Redoes_g3p4.csv > 1041-end-redoes_g3p4.csv
rest_of_g3p4_loc <- "/home/drt06/Documents/QPCR_Data_Wrangler/Program/int_files/Data_for_Project/1041-end-redoes_g3p4.csv"
only_315x320_g3p4_loc <- "/home/drt06/Documents/QPCR_Data_Wrangler/Program/int_files/Data_for_Project/315x320_G3P4.csv"
rest_of_2x2_loc <- "/home/drt06/Documents/QPCR_Data_Wrangler/Program/int_files/Data_for_Project/1041-end-redoes_2x2.csv"
only_315x320_2x2_loc <- "/home/drt06/Documents/QPCR_Data_Wrangler/Program/int_files/Data_for_Project/315x320_2x2.csv"
rest_of_g3p4 <- read.csv(rest_of_g3p4_loc, header = TRUE)
only_315x320_g3p4 <- read.csv(only_315x320_g3p4_loc, header = TRUE)
rest_of_2x2 <- read.csv(rest_of_2x2_loc, header = TRUE)
only_315x320_2x2 <- read.csv(only_315x320_2x2_loc, header = TRUE)
# binding the data sets together
rest_of_g3p4 <- rbind(rest_of_g3p4,only_315x320_g3p4)
rest_of_2x2 <- rbind(rest_of_2x2,only_315x320_2x2)
# Filtering and adjusting cp values fo the rest of the data
Data_g3p4_Means_rest <- Data_Filtering(rest_of_g3p4) # method filters data and leaves only samples
Data_2x2_Means_rest <- Data_Filtering(rest_of_2x2)
# This seperates the standards from the rest of the data
std_rest_g3p4 <- rest_of_g3p4
std_rest_2x2 <- rest_of_2x2
std_rest_g3p4_means <- FindStandardMeans(std_rest_g3p4,230) # method seperates standards from data and gets mean
Data_2x2_AdjCP_rest <- CpAdjusterP2(rest_of_g3p4_stds, Data_g3p4_Means_rest) # method adjusts the CP value based on efficiency
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest) # method adjusts the CP value based on efficiency
# method adjusts the CP value based on efficiency
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest)
View(Data_g3p4_Means_rest)
# method adjusts the CP value based on efficiency
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest)
# method adjusts the CP value based on efficiency
Data_Sets <- unique(std_rest_g3p4_means$Data_Set)
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest,Data_Sets)
# This next function works with 2 data sets. Mean standards and mean data.
# It will use the standards to calculate efficiency and use that to spit out the data with adjusted CP values
# This function uses another function called "CpAdjuster"
# THis function also removes outliars who are out of standard range or 3x std away from mean
CpAdjusterP2 <- function(Mean_Standards, Mean_Data, Data_Sets){
Data_Sets <- as.matrix(Data_Sets)
All_Data = list()
for (i in 1:nrow(Data_Sets)){
Set <- Data_Sets[i]
Current_Standard <- subset(Mean_Standards, Data_Set == Set)
Current_Data <- subset(Mean_Data, Data_Set == Set)
#Removing outliars
meanCP <- mean(Current_Data$MeanCP)
SdCP <- sd(Current_Data$MeanCP)
cutoff1 <- meanCP + 3*SdCP
cutoff2 <- meanCP - 3*SdCP
cutoffmin <- min(Current_Standard$MeanCP)
cutoffmax <- max(Current_Standard$MeanCP)
Before <- nrow(Current_Data)
Current_Data <- subset(Current_Data, MeanCP < cutoff1 & MeanCP > cutoff2 & MeanCP > cutoffmin & MeanCP < cutoffmax)
after <- nrow(Current_Data)
print(paste0(Set, " Dropped ", Before-after))
modelSet <- lm(Current_Standard$MeanCP ~ Current_Standard$LogCopyNumber)
y_intercept <- modelSet$coefficients[1]
slope <- modelSet$coefficients[2]
summary(modelSet)
Current_Data$LogCopyNumber <- round(((Current_Data$MeanCP)-y_intercept)/slope, digits = 3)
Current_Data$CopyNumber <- 10^Current_Data$LogCopyNumber # Reverse the log
All_DataC <- CpAdjuster(modelSet, Current_Data) # Need this to remove outliars too
All_Data[[i]] <-  All_DataC
}
All_Data <- bind_rows(All_Data)
return(All_Data)
}
Data_2x2_AdjCP <- CpAdjusterP2(Standard_means_2x2, Data_2x2_Means, Data_Sets)
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest,Data_Sets)
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_2x2_means, Data_2x2_Means_rest,Data_Sets)
Data_2x2_Means_rest <- Data_Filtering(rest_of_2x2)
std_rest_2x2_means <- FindStandardMeans(rest_of_2x2,230)
View(std_rest_2x2_means)
View(Data_2x2_AdjCP_rest)
View(Data_2x2_Means_rest)
Data_g3p4_AdjCP_rest <- CpAdjusterP2(std_rest_g3p4_means, Data_g3p4_Means_rest,Data_Sets)
Data_2x2_AdjCP_rest <- CpAdjusterP2(std_rest_2x2_means, Data_2x2_Means_rest,Data_Sets)
View(Data_g3p4_AdjCP_rest)
View(Data_2x2_Means_rest)
combined_2x2 <- rbind(Data_2x2_AdjCP,Data_2x2_AdjCP_rest)
View(combined_2x2)
combined_g3p4 <- rbind(Data_g3p4_AdjCP, Data_g3p4_AdjCP_rest)
merge(combined_2x2,combined_g3p4, by.x = c("Data_Set", "Treatment"), by.y = c("Data_Set", "Treatment"))
all_Data <- merge(combined_2x2,combined_g3p4, by.x = c("Data_Set", "Treatment"), by.y = c("Data_Set", "Treatment"))
rownames(all_Data)
colnames(all_Data)
View(combined_2x2)
str_replace(colnames(all_Data),'x', 'Epi')
View(all_Data)
str_replace(colnames(all_Data),'x', 'Epichloe')
str_replace(colnames(all_Data),'y', 'Fescue')
str_replace(colnames(all_Data),'.y', '.Fescue')
str_replace(colnames(all_Data),'.y', '.Fescue')
str_replace(colnames(all_Data),".y", '.Fescue')
colnames(all_Data)
str_replace(colnames(all_Data),".y", '.Fescue')
str_replace(colnames(all_Data),".y", ".Fescue")
str_replace(colnames(all_Data),"y", ".Fescue")
str_replace(colnames(all_Data),"y", "")
str_replace(colnames(all_Data),".y", "*")
str_replace(colnames(all_Data),"[.y]", "*")
str_replace(colnames(all_Data),"[y]", "*")
str_replace(colnames(all_Data),'x', 'Epichloe')
rename(colnames(all_Data), MeanCP.y = MeanCP.Fescue, LogCopyNumber.y = LogCopyNumber.Fescue, CopyNumber.y = CopyNumber.y, adjCP.y = adjCP.y, Efficiency.y = Efficiency.Fescue)
Columns <- colnames(all_Data)
str_replace(Columns,'x', 'Epichloe')
rename( Columns, MeanCP.y = MeanCP.Fescue, LogCopyNumber.y = LogCopyNumber.Fescue, CopyNumber.y = CopyNumber.y, adjCP.y = adjCP.y, Efficiency.y = Efficiency.Fescue)
rename()
Columns %>% rename(MeanCP.y = MeanCP.Fescue, LogCopyNumber.y = LogCopyNumber.Fescue, CopyNumber.y = CopyNumber.y, adjCP.y = adjCP.y, Efficiency.y = Efficiency.Fescue)
Columns %>% rename(MeanCP.y = MeanCP.Fescue)
Columns
new_colnames <- gsub("\\.y$", "Fescue", Columns)
new_colnames
Columns <- colnames(all_Data)
Columns <- gsub("\\.y$", ".Fescue", Columns)
Columns <- gsub("\\.x$", ".Epichloe", Columns)
Columns
colnames(all_Data) <- Columns
colnames(all_Data)
# Dela CT is Fescue - EPichloe
all_Data$Î”CT <- all_Data$adjCP.Fescue - all_Data$adjCP.Epichloe
# Dela CT is Fescue - EPichloe
all_Data$Delta_CT <- all_Data$adjCP.Fescue - all_Data$adjCP.Epichloe
# Dela CT is Fescue - EPichloe
all_Data$Delta_CT <- as.numeric(all_Data$adjCP.Fescue) - as.numeric(all_Data$adjCP.Epichloe)
# Delta Ratio is Fescue / Epichloe
all_Data$Fes_to_Epi_Ratio <- all_Data$adjCP.Fescue / all_Data$adjCP.Epichloe
# Dela CT is Fescue - EPichloe
as.numeric(all_Data$adjCP.Fescue)
# Dela CT is Fescue - EPichloe
all_Data$adjCP.Fescue <- as.numeric(all_Data$adjCP.Fescue)
all_Data$adjCP.Epichloe <- as.numeric(all_Data$adjCP.Epichloe)
all_Data$Delta_CT <- all_Data$adjCP.Fescue - all_Data$adjCP.Epichloe
# Dela CT is Fescue - EPichloe
all_Data$Delta_CT <- all_Data$adjCP.Fescue - all_Data$adjCP.Epichloe
# Delta Ratio is Fescue / Epichloe
all_Data$Fes_to_Epi_Ratio <- all_Data$adjCP.Fescue / all_Data$adjCP.Epichloe
ggplot(all_Data, aes(x=Data_Sets, y=Fes_to_Epi_Ratio, color = Data_Sets)) +
geom_point( size = 2)
ggplot(all_Data, aes(x=Data_Set, y=Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2)
ggplot(all_Data, aes(x=Data_Set, y=Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Ratios of Fescue / Epichloe")
ggplot(all_Data, aes(x=Data_Set, y=Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Fescue CT - Epichloe CT")
# getting the log values then recaluculating the diffrence and ratios
all_Data$Log_adjCP.Fescue <- log10(all_Data$adjCP.Fescue)
all_Data$Log_adjCP.Epichloe <- log10(all_Data$adjCP.Epichloe)
all_Data$Log_Delta_CT <- Log_adjCP.Fescue - Log_adjCP.Epichloe
all_Data$Log_Delta_CT <- all_Data$Log_adjCP.Fescue - all_Data$Log_adjCP.Epichloe
all_Data$Log_Fes_to_Epi_Ratio <- all_Data$Log_adjCP.Fescue / all_Data$Log_adjCP.Epichloe
ggplot(all_Data, aes(x=Data_Set, y=Log_Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Ratios of Fescue / Epichloe")
ggplot(all_Data, aes(x=Data_Set, y=Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Ratios of Fescue / Epichloe")
ggplot(all_Data, aes(x=Data_Set, y=Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Fescue CT - Epichloe CT")
ggplot(all_Data, aes(x=Data_Set, y=Log_Fes_to_Epi_Ratio, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Ratios of Fescue / Epichloe")
ggplot(all_Data, aes(x=Data_Set, y=Log_Delta_CT, color = Data_Set)) +
geom_point( size = 2) +
ggtitle("Logged Fescue CT - Epichloe CT")
#Importing data sets
# This first set of data is all the data corresponding to the first set of standards
all_2x2_loc <- "/home/drt06/Documents/QPCR_Data_Wrangler/Program/int_files/Data_for_Project/all_2x2_Red_Blue.csv"
all_2x2 <- read.csv(all_2x2_loc, header = TRUE)
# Import libraries
library(tidyverse)
library(ggplot2)
library(ggpubr)
#Importing data sets
# This first set of data is all the data corresponding to the first set of standards
all_2x2_loc <- "/home/darrian/Desktop/UGA/QPCR_Data_Wrangler/QPCR_Data_Wrangler/Program/output/Final_Data_2024/all_2x2_2024.csv"
all_g3p4_loc <- "/home/darrian/Desktop/UGA/QPCR_Data_Wrangler/QPCR_Data_Wrangler/Program/output/Final_Data_2024/all_g3p4_2024.csv"
alkaloid <- "/home/darrian/Desktop/UGA/Tall_Fescue/Alkaloid_Data/Alkaloid_concentrations_2024.csv"
all_2x2 <- read.csv(all_2x2_loc, header = TRUE)
all_g3p4 <- read.csv(all_g3p4_loc, header = TRUE)
alkaloid <- read.csv(alkaloid, header = TRUE)
# Fixing data to be agglomerated together
all_2x2 <- subset(all_2x2, select = -X)
all_g3p4 <- subset(all_g3p4, select = -X)
all_2x2 <-
all_2x2 %>% rename(meanCP_TF = meanCP, ngDNA_TF = ngDNA, CopyNumber_TF = CopyNumber, LogCopyNumber_TF = LogCopyNumber)
all_g3p4 <-
all_g3p4 %>% rename(meanCP_E = meanCP, ngDNA_E = ngDNA, CopyNumber_E = CopyNumber, LogCopyNumber_E = LogCopyNumber)
raw_all <- merge(all_2x2, all_g3p4, by = c("Treatment", "Plate"))
raw_all <- merge(raw_all, alkaloid, by = c("Treatment"))
raw_all$Plate <- as.character(raw_all$Plate)
raw_all$EoverTF <- (raw_all$ngDNA_E / raw_all$ngDNA_TF)
DNAbyAlkaloid <- lm(ngDNA_TF ~ EoverTF ,data = raw_all)
summary_model <- summary(DNAbyAlkaloid)
rsquared <- summary_model$r.squared
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# Objective : This code will combine all the data using my original standards find a correlation between them
# Import libraries
library(tidyverse)
library(ggplot2)
library(ggpubr)
#Importing data sets
# This first set of data is all the data corresponding to the first set of standards
all_2x2_loc <- "/home/darrian/Desktop/UGA/QPCR_Data_Wrangler/QPCR_Data_Wrangler/Program/output/Final_Data_2024/all_2x2_2024.csv"
all_g3p4_loc <- "/home/darrian/Desktop/UGA/QPCR_Data_Wrangler/QPCR_Data_Wrangler/Program/output/Final_Data_2024/all_g3p4_2024.csv"
alkaloid <- "/home/darrian/Desktop/UGA/Tall_Fescue/Alkaloid_Data/Alkaloid_concentrations_2024.csv"
all_2x2 <- read.csv(all_2x2_loc, header = TRUE)
all_g3p4 <- read.csv(all_g3p4_loc, header = TRUE)
alkaloid <- read.csv(alkaloid, header = TRUE)
# Fixing data to be agglomerated together
all_2x2 <- subset(all_2x2, select = -X)
all_g3p4 <- subset(all_g3p4, select = -X)
all_2x2 <-
all_2x2 %>% rename(meanCP_TF = meanCP, ngDNA_TF = ngDNA, CopyNumber_TF = CopyNumber, LogCopyNumber_TF = LogCopyNumber)
all_g3p4 <-
all_g3p4 %>% rename(meanCP_E = meanCP, ngDNA_E = ngDNA, CopyNumber_E = CopyNumber, LogCopyNumber_E = LogCopyNumber)
raw_all <- merge(all_2x2, all_g3p4, by = c("Treatment", "Plate"))
raw_all <- merge(raw_all, alkaloid, by = c("Treatment"))
raw_all$Plate <- as.character(raw_all$Plate)
raw_all$EoverTF <- (raw_all$ngDNA_E / raw_all$ngDNA_TF)
#############################################################
# linear models
#############################################################
DNAbyAlkaloid <- lm(ngDNA_TF ~ EoverTF ,data = raw_all)
summary_model <- summary(DNAbyAlkaloid)
rsquared <- summary_model$r.squared
####################################
# Making correlation graphs
#####################################
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
DNAbyAlkaloid
View(raw_all)
View(raw_all)
# We want to use the entire data set and take out everything that effects CT values.
normalized_EoTF <- aov(EoverTF ~ Plate, data = raw_all)
summary(normalized_EoTF) # The filtered data
# We want to use the entire data set and take out everything that effects CT values.
normalized_EoTF <- lm(EoverTF ~ Plate, data = raw_all)
summary(normalized_EoTF) # The filtered data
data1 <- data.frame(raw_all$Treatment, normalized_EoTF$residuals)
View(data1)
data2 <- data.frame(raw_all$Treatment, raw_all$ppbAlk_con)
residual_data <- merge(data1, data2, by = "Treatment", all = TRUE)
names(data1)[names(data1) == "raw_all.Treatment"] <- "Treatment"
names(data2)[names(data2) == "raw_all.Treatment"] <- "Treatment"
residual_data <- merge(data1, data2, by = "Treatment", all = TRUE)
View(residual_data)
data1 <- data.frame(raw_all$Treatment, raw_all$EoverTF - normalized_EoTF$residuals)
data2 <- data.frame(raw_all$Treatment, raw_all$ppbAlk_con)
names(data1)[names(data1) == "raw_all.Treatment"] <- "Treatment"
names(data2)[names(data2) == "raw_all.Treatment"] <- "Treatment"
residual_data <- merge(data1, data2, by = "Treatment", all = TRUE)
View(data1)
data_no_residuals <- merge(data1, data2, by = "Treatment", all = TRUE)
View(data1)
View(data_no_residuals)
# Renaming Columns
new_names <- c("Treatment", "EoTF_ResidualRemoved", "ppbAlkiloids")
names(data_no_residuals) <- new_names
data_no_residuals
# Adding in metadata
metadata <- raw_all$Plate
head(metadata)
# Adding in metadata
metadata <- subset(raw_all, select = Plate)
head(metadata)
# Adding in metadata
metadata <- subset(raw_all, select = (c(Plate, Treatment)))
metadata
merge(data_no_residuals, metadata, by = c("Treatment"))
data_no_residuals <- merge(data_no_residuals, metadata, by = c("Treatment"))
data_no_residuals
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
head(data_no_residuals)
raw_all$EoverTF - normalized_EoTF$residuals
resid(normalized_EoTF)
adjustedEoTF <- resid(normalized_EoTF)
# Adding the residuals back into the data
adjustedEoTF <- resid(normalized_EoTF)
adjusted_EoverTF <- mean(raw_all$EoverTF) - adjusted_EoverTF
# Adding the residuals back into the data
adjustedEoTF <- resid(normalized_EoTF)
adjusted_EoverTF <- mean(raw_all$EoverTF) - adjustedEoTF
head(adjusted_EoverTF)
# Removing residuals from data
data1 <- data.frame(raw_all$Treatment)
data1$adjusted_EoverTF <- adjusted_EoverTF
data2 <- data.frame(raw_all$Treatment, raw_all$ppbAlk_con)
names(data1)[names(data1) == "raw_all.Treatment"] <- "Treatment"
names(data2)[names(data2) == "raw_all.Treatment"] <- "Treatment"
data_no_residuals <- merge(data1, data2, by = "Treatment", all = TRUE)
head(data_no_residuals)
# Renaming Columns
new_names <- c("Treatment", "EoTF_ResidualRemoved", "ppbAlkiloids")
names(data_no_residuals) <- new_names
# Adding in metadata
metadata <- subset(raw_all, select = (c(Plate, Treatment)))
data_no_residuals <- merge(data_no_residuals, metadata, by = c("Treatment"))
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
AlkaloidbyDNA <- lm(ppbAlk_con ~ EoverTF ,data = raw_all)
summary_model <- summary(AlkaloidbyDNA)
rsquared <- summary_model$r.squared
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# getting r squared
model_residual <- lm(ppbAlkiloids ~ EoTF_ResidualRemoved ,data = data_no_residuals)
summary_model_residual <- summary(model_residual)
rsquared_residual <- summary_model_residual$r.squared
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared_residual, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared_residual, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# We want to use the entire data set and take out everything that effects CT values.
normalized_EoTF <- lm(EoverTF ~ Plate, data = raw_all)
summary(normalized_EoTF) # The filtered data
# removing the residuals from the data by getting the mean then subtracting the residuals
adjustedEoTF <- resid(normalized_EoTF)
adjusted_EoverTF <- mean(raw_all$EoverTF) + adjustedEoTF # Optionally adding back the mean to make numbers meaningful. Could just use residuals
# Removing residuals from data
data1 <- data.frame(raw_all$Treatment)
data1$adjusted_EoverTF <- adjusted_EoverTF
data2 <- data.frame(raw_all$Treatment, raw_all$ppbAlk_con)
names(data1)[names(data1) == "raw_all.Treatment"] <- "Treatment"
names(data2)[names(data2) == "raw_all.Treatment"] <- "Treatment"
data_no_residuals <- merge(data1, data2, by = "Treatment", all = TRUE)
# Renaming Columns
new_names <- c("Treatment", "EoTF_ResidualRemoved", "ppbAlkiloids")
names(data_no_residuals) <- new_names
# Adding in metadata
metadata <- subset(raw_all, select = (c(Plate, Treatment)))
data_no_residuals <- merge(data_no_residuals, metadata, by = c("Treatment"))
# getting r squared
model_residual <- lm(ppbAlkiloids ~ EoTF_ResidualRemoved ,data = data_no_residuals)
summary_model_residual <- summary(model_residual)
rsquared_residual <- summary_model_residual$r.squared
ggplot() +
geom_point(data = raw_all, aes(x = ngDNA_E, y = ngDNA_TF, color = Plate), size = 2) +
labs(x = "Endophyte ng DNA", y = "Tall Fescue ng DNA", title = "Biomass Correlation") +
theme_bw()
ggplot(data = raw_all, aes(x = EoverTF, y = ppbAlk_con)) +
geom_point(data = raw_all, aes(x = EoverTF, y = ppbAlk_con, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# residual plot
ggplot(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids)) +
geom_point(data = data_no_residuals, aes(x = EoTF_ResidualRemoved, y = ppbAlkiloids, color = Plate), size = 2) +
labs(x = "Endophyte over Fescue ng DNA", y = "Alkaloid ppb", title = "Alkaloid Concentration vs Endophyte Biomass Estimation") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
annotate("text", x = Inf, y = -Inf, label = paste("RÂ² =", round(rsquared_residual, 3)),
hjust = 1.1, vjust = -0.5, size = 5, color = "black") +
theme_bw()
# Loading in data
final_List_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/residual_data_father_included_2.txt"
### Visualize the best crosses
final_List <- read.csv(final_List_loc, header = TRUE, strip.white=TRUE)
final_List <- subset(final_List, Status != "dead")
View(final_List)
# linear model of biomass efficiency adjusted x alkaloid
model1 <- lm(filtered_CT_model.residuals ~ alkaloid_model.residuals, data = final_List)
model2 <- lm(alkaloid_model.residuals ~ filtered_CT_model.residuals, data = final_List)
summary(model1)
summary(model2)
ggplot(final_List, aes(x = filtered_CT_model.residuals, y = alkaloid_model.residuals)) +
geom_point() +
labs(x = "Adjusted Biomass Risidual Values", y = "Alkaloid Risiduals", title = "Alklaoid vs Biomass")  # Add labels and title
# The point of this Rscript is to combine all the meta data to one common file.
library(ggplot2)
ggplot(final_List, aes(x = filtered_CT_model.residuals, y = alkaloid_model.residuals)) +
geom_point() +
labs(x = "Adjusted Biomass Risidual Values", y = "Alkaloid Risiduals", title = "Alklaoid vs Biomass")  # Add labels and title
final_List$filtered_CT_model.residuals
final_List$alkaloid_model.residuals
CT_model_raw <- lm(DeltaCT_Raw ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_Data_raw)
ggplot(cross_count_subseted,aes( x = reorder(Var1, -Freq), y = Freq)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Alive Plants", x = "Crosses", y = "Count") +
theme(axis.text.x = element_text(size = 12)) +
geom_text(aes(label = Freq), vjust = -0.5)
View(model1)
