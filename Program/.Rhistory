ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right")+
theme(axis.text.x = element_text(size=45)) +
theme_bw() +
ggsave(file="Endophyte_status.png")
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right")+
theme(axis.text.x = element_text(size=45)) +
theme_bw()
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left")+
theme(axis.text.x = element_text(size=45)) +
theme_bw()
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left")+
theme(axis.text.x = element_text(size=45))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left", axis.text.x = element_text(size=45))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left", axis.text.x = element_text(size=5))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left", axis.text.x = element_text(size=15))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left", axis.text.x = element_text(size=10))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "left", axis.text.x = element_text(size=8))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8), plot.background = element_rect(fill = "white"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"))
#Making plot based on sample names
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = Treatment,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right") +
theme_bw()
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "grey", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "grey69", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "seashell3", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory1", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory3", linetype = "solid"))
#Making plot based on sample names
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = Treatment,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right") +
theme_bw()
#Making plot based on sample names
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = Treatment,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right") +
theme_bw()
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory3", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"),
panel.grid.minor = element_line(colour = "blue", size = 2))
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"),
panel.grid.minor = element_line(colour = "ivory2"))
#Making plot based on sample names
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = Treatment,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right") +
theme_bw()
#Making plot based on endophyte status
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"),
panel.grid.minor = element_line(colour = "ivory2"))
View(PredDNA)
View(true_data)
#Making plot based on endophyte status
true_data$Pos <- factor(true_data$Pos, levels = true_data$Pos)
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = EndoPos_Neg_Water,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right", axis.text.x = element_text(size=8),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="blue"),
panel.grid.major = element_line(colour = "ivory2", linetype = "solid"),
panel.grid.minor = element_line(colour = "ivory2"))
ggplot(data = true_data,
aes(
x = Pos,
y = Cp,
color = Treatment,
shape = Primer_Set
)) +
geom_point(size = 5) +
theme(legend.position = "right") +
theme_bw()
# # Graph of line of best fit
PredDNA$gen_color <- rep('black',nrow(PredDNA))
PredDNA$gen_color[row.names(PredDNA) == 'std1'] <- 'green'
PredDNA$gen_color[row.names(PredDNA) == 'std2'] <- 'green'
PredDNA$gen_color[row.names(PredDNA) == 'std3'] <- 'green'
PredDNA$gen_color[row.names(PredDNA) == 'std4'] <- 'green'
ggplot(data = PredDNA,
aes(
x = ng.of.DNA,
y = Cp,
)) +
geom_point(aes(size = 5, color=gen_color)) +
scale_color_identity(guide = "legend", labels = c("Samples","Standard")) +
labs(color= "gen_color") +
theme(legend.position = "right") +
geom_text(x=100, y=25.5,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
# # creating log of starting DNA to calculate efficiency
PredDNA$Log <- log10(PredDNA$ng.of.DNA)
View(PredDNA)
View(QPCRmeans2)
View(QPCRmeans)
View(stdData)
nrow(stdData)
stdData[1][2]
stdData[1][1]
stdData[2][1]
stdData[2][2]
stdData[2][0]
stdData[2][1]
stdData[5][1]
stdData[5]
stdData[5,1]
stdData[4,1]
stdData[4,0]
stdData[4,2]
# # creating log of starting DNA to calculate efficiency
matrixologs = matrix(nrow = 4, ncol = 1)
for (i in 1:nrow(stdData)){
matrixologs[i,1] <- log10(stdData[i,1])
}
View(matrixologs)
cbind(stdData, matrixologs[,1])
# # finding the log sum of X*Y
Lxy = matrix(nrow = 4, ncol = 1)
i=1
for(i in 1:nrow(stdData)){
xy[i,1] = stdData[i,3] * stdData[i,2]
}
LXY <- sum(Lxy)
# # finding the Log sum of X
LX <- sum(stdData[,3])
# # finding the sum of Y
LY <- sum(stdData[,2])
# # finding X^2
Lx2 = matrix(nrow = 4, ncol = 1)
for(i in 1:nrow(stdData)){
Lx2[i,1] = stdData[i,3]^2
}
stdData <- cbind(stdData, matrixologs[,1])
# # finding the log sum of X*Y
Lxy = matrix(nrow = 4, ncol = 1)
i=1
for(i in 1:nrow(stdData)){
xy[i,1] = stdData[i,3] * stdData[i,2]
}
LXY <- sum(Lxy)
# # finding the Log sum of X
LX <- sum(stdData[,3])
# # finding the sum of Y
LY <- sum(stdData[,2])
# # finding X^2
Lx2 = matrix(nrow = 4, ncol = 1)
for(i in 1:nrow(stdData)){
Lx2[i,1] = stdData[i,3]^2
}
LX2 <- sum(Lx2)
# # finding m and b
n = nrow(stdData)
Lm = ((n * LXY) - (LX * LY)) / ((n * LX2) - LX^2)
Lb = (LY-(Lm*LX))/n
Lm
# # finding the log sum of X*Y
Lxy = matrix(nrow = 4, ncol = 1)
i=1
for(i in 1:nrow(stdData)){
Lxy[i,1] = stdData[i,3] * stdData[i,2]
}
LXY <- sum(Lxy)
# # finding the Log sum of X
LX <- sum(stdData[,3])
# # finding the sum of Y
LY <- sum(stdData[,2])
# # finding X^2
Lx2 = matrix(nrow = 4, ncol = 1)
for(i in 1:nrow(stdData)){
Lx2[i,1] = stdData[i,3]^2
}
LX2 <- sum(Lx2)
# # finding m and b
n = nrow(stdData)
Lm = ((n * LXY) - (LX * LY)) / ((n * LX2) - LX^2)
Lb = (LY-(Lm*LX))/n
efficiency <- as.data.frame(stdData)
View(efficiency)
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V1,
)) +
geom_point(aes(size = 5, color=gen_color)) +
scale_color_identity(guide = "legend", labels = c("Samples","Standard")) +
labs(color= "gen_color") +
theme(legend.position = "right") +
geom_text(x=100, y=25.5,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V1,
)) +
geom_point(aes(size = 5, color=gen_color)) +
geom_text(x=100, y=25.5,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V1,
)) +
geom_point(aes(size = 5)) +
geom_text(x=100, y=25.5,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
ggplot(data = PredDNA,
aes(
x = ng.of.DNA,
y = Cp,
)) +
geom_point(aes(size = 5, color=gen_color)) +
scale_color_identity(guide = "legend", labels = c("Samples","Standard")) +
labs(color= "gen_color") +
theme(legend.position = "right") +
geom_text(x=100, y=25.5,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V2,
)) +
geom_point(aes(size = 5)) +
geom_text(x=2.5, y=26,label=(paste0("slope = ",round(m, digits = 6)))) +
theme_bw()
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V2,
)) +
geom_point(aes(size = 5)) +
geom_text(x=2.5, y=30,label=(paste0("slope = ",round(Lm, digits = 6)))) +
theme_bw()
E <- -1+10^(-1/Lm)
E <- (-1+10^(-1/Lm))*100
# # graph of Cp and log DNA amount
ggplot(data = efficiency,
aes(
x = V3,
y = V2,
)) +
geom_point(aes(size = 5)) +
geom_text(x=2.5, y=30,label=(paste0("slope = ",round(Lm, digits = 6)))) +
geom_text(x=2.5, y=29.5,label=(paste0("effieciency = ",round(E, digits = 4)))) +
theme_bw()
